C UTEP Electronic Structure Lab (2020)
C
C *****************************************************
C
C APOTNL (DIRK POREZAG, 1994, 1998) (MARK PEDERSON 1987-1994)
C APOTNL CALCULATES THE POTENTIAL ON THE MESHPOINTS WITHIN LSDA OR GGA 
C ATTENTION: FIRST TWO ARRAYS OF COMMON BLOCK TMP1 MUST BE IDENTICAL IN 
C DENSOLD AND APOTNL SINCE THEY ARE USED TO PASS DENSITY AND COULOMB POT
C
       SUBROUTINE APOTNL(TOTQNUM,ITTOT)
       use global_inputs,only : SOLVENT1,EXCITED1,SPNORB1,PCM1,
     &     MIXING1,EFP1
       use pot_dens,only : COULOMB,RHOG
       use mixpot1,only : POTIN,POT=>POTOUT
       use mesh1,only : WMSH,RMSH,NMSH
       use common2,only : RCNT, IFUCNT, NIDENT, NCNT, ZELC, IGGA,
     &   NSPN, DIPOLE, EFIELD, ELOCAL, ECOUL,  ERGFLD,ESOLC
       use common3,only : RMAT, NGRP
       use common5,only : CONVERGENCE
       use common7,only : MODDEN, GAUSS_CUT
       use solvent,only : POTSOL
! Conversion to implicit none.  Raja Zope Sun Aug 20 09:01:46 MDT 2017

!      INCLUDE  'PARAMAS'  
       INCLUDE  'PARAMA2'  
       INTEGER :: ITTOT, I, IA, IAT, IERR, IFAK, IFNCT, IGRAD, IGRP,
     & IOFS, IPTS, ITER, J, NGRAD
       REAL*8 :: TOTQNUM , APT1, APT2, AVG, DERIV, EXHERE, FAC, FACTOR,
     & PEXPOT, PSAVE, RNAN1, RNAN2, RNAN3, RROT, TIME1, TIME2,
     & TIMECOUL, TIMEGORB, TIMERHO,TIME4
       SAVE
C
C FOOL THE COMPILER FOR MXSPN=1 TO SUPRESS WARNING MESSAGES
C THAT ARE REALLY IRRELEVANT
C
C       COMMON/MIXPOT/POTIN(MAX_PTS*MXSPN),POT(MAX_PTS*MXSPN)
C       COMMON/TMP1/ACOULOMB(MAX_PTS),ARHOG(MAX_PTS,KRHOG,MXSPN)
C     &  ,RVECA(3,MX_GRP),RDIS(NSPEED),VLOC(NSPEED)
C       COMMON/TMP1/RVECA(3,MX_GRP),RDIS(NSPEED),VLOC(NSPEED)
       LOGICAL FIRST,AVERAGE,EXIST
       CHARACTER*7 NAMES
       DIMENSION NAMES(3),DERIV(3)
       REAL*8,ALLOCATABLE :: RVECA(:,:),RDIS(:),VLOC(:)
C
       DATA FIRST/.TRUE./
       DATA NAMES/'BROYDEN','KBROY1','KBROY2'/
       DATA AVERAGE/.FALSE./
C
C DIRECTIONS FOR CALCULATING DENSITY:
C MODDEN=1 USE DENSITY MATRIX
C MODDEN=2 USE WAVEFUNCTIONS
C

C
C ALLLOCATE LOCAL ARRAYS
C
       ALLOCATE(RVECA(3,MX_GRP),STAT=IERR)
       IF(IERR.NE.0) WRITE(6,*)'APOTNL:ERROR ALLOCATING RVECA'
       ALLOCATE(RDIS(NSPEED),STAT=IERR)
       IF(IERR.NE.0) WRITE(6,*)'APOTNL:ERROR ALLOCATING RDISA'
       ALLOCATE(VLOC(NSPEED),STAT=IERR)
       IF(IERR.NE.0) WRITE(6,*)'APOTNL:ERROR ALLOCATING VLOC'

       MODDEN=1
       PRINT '(A)','CALCULATING KOHN-SHAM POTENTIAL ON MESH POINTS'
       CALL GTTIME(APT1)
       CALL CHECK_INPUTS
       IF(MIXING1.EQ.0)THEN
        ITER=0
        IF(FIRST)THEN
         FIRST=.FALSE.
C
C READ AVERAGE
C
         AVG=0.15D0
         AVERAGE=.TRUE.
         OPEN(99,FILE='AVRGDAT',FORM='FORMATTED',STATUS='UNKNOWN')
         REWIND 99
         READ(99,*,END=30)AVG,AVERAGE
   30    CONTINUE
         REWIND(99)
         WRITE(99,*)AVG,AVERAGE,' AVG, AVERAGE'
         CLOSE(99)
C
C SET GAUSS_CUT (IN THIS VERSION ONLY NEEDED BY COULOMB1)
C
         DO IAT=1,NIDENT
          GAUSS_CUT(IAT)=1.0D30
         END DO
        END IF
       ENDIF
C
C START UP POTENTIAL CALCULATION: CHECK ARRAY DIMENSIONS
C
       IF(NMSH.GT.MAX_PTS) THEN
        write(6,*)'APOTNL: MAX_PTS MUST BE AT LEAST', NMSH
        CALL STOPIT
       END IF
       CALL CHECK_INPUTS
       WRITE(6,*)'EFP1=',EFP1
C
C CALCULATE ELECTRONIC COULOMB POTENTIAL AND DENSITY
C
C ALLOCATE COULOMB AND RHOG HERE BEFORE CALLING COUPOT1
#ifdef MPI
       CALL SENDDATA(108)
#else
       ALLOCATE(COULOMB(NMSH*MXSPN),STAT=IERR)
       IF(IERR.NE.0)THEN
         WRITE(6,*)'ERROR ALLOCATING COULOMB'
       ENDIF
       ALLOCATE(RHOG(NMSH,KRHOG,MXSPN),STAT=IERR)
       IF(IERR.NE.0)THEN
         WRITE(6,*)'ERROR ALLOCATING RHOG'
       ENDIF
#endif   
       CALL GTTIME(TIME1)
       CALL COUPOT1
       CALL GTTIME(TIME2)
       TIMECOUL=TIME2-TIME1
       CALL GTTIME(TIME1)
       IF (MODDEN .EQ. 2) THEN
        CALL DENSOLD(TIMEGORB)
       END IF
       CALL GTTIME(TIME2)
       TIMERHO=TIME2-TIME1
C
C UPDATE DATA IN RHOG 
C
       NGRAD=1
       IF ((IGGA(1).GT.0).OR.(IGGA(2).GT.0)) NGRAD=KRHOG
       DO IGRAD=1,NGRAD
        DO IPTS=1,NMSH
         RHOG(IPTS,IGRAD,1)= RHOG(IPTS,IGRAD,1)+RHOG(IPTS,IGRAD,NSPN)
        END DO
       END DO
C
C DONE WITH DENSITY CALCULATION, NOW
C CALCULATE TOTAL CHARGE AND DIPOLE MOMENT
C
       TOTQNUM=0.0D0
       DO I=1,3
        DIPOLE(I)=0.0D0
       END DO
       DO 120 IPTS=1,NMSH
        PSAVE=RHOG(IPTS,1,1)*WMSH(IPTS) 
        TOTQNUM=TOTQNUM+PSAVE
        DO I=1,3
         RROT=0.0D0
         DO IGRP=1,NGRP
          DO J=1,3
           RROT=RROT+RMAT(J,I,IGRP)*RMSH(J,IPTS)
          END DO
         END DO
         DIPOLE(I)=DIPOLE(I)+RROT*PSAVE
        END DO
  120  CONTINUE 
        WRITE(6,*)'TOTQNUM =',TOTQNUM
       DO I=1,3
        DIPOLE(I)=DIPOLE(I)/NGRP
       END DO
C      CALL R_PART
C     call r_expect_val(max_pts,mxspn,nmsh,ipts,mx_grp,ngrp,
C    &   Rmat,Rhog,Wmsh,Rmsh)

C
C ADD CONTRIBUTION OF ATOM CENTERS TO DIPOLE MOMENT
C CALCULATE ENERGY DUE TO EXTERNAL FIELD
C ALSO GET INTERACTION BETWEEN PROTONS AND EXTERNAL POTENTIAL...
C
       PEXPOT=0.0D0
       DO IA=1,NCNT
       CALL EXTPOT(RCNT(1,IA),EXHERE,DERIV)
        IFNCT=IFUCNT(IA)
        FAC=ABS(ZELC(IFNCT))
          PEXPOT=PEXPOT-EXHERE*FAC
        DO I=1,3
         DIPOLE(I)=DIPOLE(I)-FAC*RCNT(I,IA)
        END DO
       END DO
       ERGFLD=0.0D0
       DO I=1,3
        ERGFLD= ERGFLD+DIPOLE(I)*EFIELD(I)
       END DO
       PRINT 9010,TOTQNUM
       PRINT 9020,(DIPOLE(I),I=1,3)
 9010  FORMAT('TOTAL CHARGE IN APOTNL: ',F22.12)
 9020  FORMAT('DIPOLE MOMENT:',3(1X,D20.12))   
       OPEN(21,FILE='DIPOLE',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(21)
       WRITE(21,'(3(1X,D20.12))')(DIPOLE(I), I=1,3)
       CLOSE(21)
C
C CALCULATING KOHN-SHAM POTENTIAL
C GETVLXC CALCULATES THE EXCHANGE-CORRELATION POTENTIAL (STORED IN POT)
C AND THE LOCAL POTENTIAL (STORED IN POTIN)
C EXCHANGE-CORRELATION ENERGY WILL BE STORED IN COMMOM BLOCK ENERG
C
       CALL GETVLXC(NMSH,RHOG,POT,POTIN)
       CALL AFPOT(NSPN,RHOG,POT,POTIN)
C
C CALCULATE: ECOUL  (MEAN-FIELD COULOMB ENERGY)
C            ELOCAL (LOCAL POTENTIAL ENERGY)
C SAVE AVERAGE EXCHANGE-CORRELATION POTENTIAL IN POTIN
C UPDATE UP AND DOWN POTENTIAL, COULOMB
C
C LB
       CALL CHECK_INPUTS
       IF(SOLVENT1) THEN
         WRITE(6,*)'FROM APOTNL : ITTOT = ',ITTOT
#ifdef MPI
         !IF (ITTOT.EQ.1) CALL SENDDATA(114)
#else
         !IF (ITTOT.EQ.1) CALL SOLPOT(ITTOT)
#endif
       ENDIF
C LB
       IFAK=NSPN-1
       IOFS=IFAK*NMSH
       ECOUL=PEXPOT
       ELOCAL=0.0D0
       IF(SOLVENT1) ESOLC=0.0D0
       RNAN1=0.0D0
       RNAN2=0.0D0
       RNAN3=0.0D0
       DO 180 IPTS=1,NMSH
        CALL EXTPOT(RMSH(1,IPTS),EXHERE,DERIV)
        FACTOR=RHOG(IPTS,1,1)*WMSH(IPTS)
        ECOUL= ECOUL+0.5D0*COULOMB(IPTS)*FACTOR
        IF(SOLVENT1) ESOLC=ESOLC+POTSOL(IPTS)*FACTOR
        RNAN1 = RNAN1+FACTOR
        RNAN2 = RNAN2+COULOMB(IPTS)
        RNAN3 = RNAN3+EXHERE   
        ECOUL = ECOUL+EXHERE*FACTOR
        ELOCAL=ELOCAL+POTIN(IPTS)*FACTOR
        COULOMB(IPTS) = COULOMB(IPTS)+POTIN(IPTS)
        POTIN(IPTS)= 0.5D0*(POT(IPTS)+POT(IOFS+IPTS))
        COULOMB(IPTS)=EFIELD(1)*RMSH(1,IPTS)+EFIELD(2)*RMSH(2,IPTS)
     &        +EFIELD(3)*RMSH(3,IPTS)+COULOMB(IPTS)+EXHERE
        IF(SOLVENT1) THEN
          POT(IPTS)=POT(IPTS)+COULOMB(IPTS)+POTSOL(IPTS)
         POT(IOFS+IPTS)=POT(IOFS+IPTS)+IFAK*(COULOMB(IPTS)+POTSOL(IPTS))
        ELSE
          POT(IPTS)=POT(IPTS)+COULOMB(IPTS)
          POT(IOFS+IPTS)=POT(IOFS+IPTS)+IFAK*COULOMB(IPTS)
        ENDIF
  180  CONTINUE
C
C WRITE OUT COULOMB POTENTIAL (NEEDED FOR SPIN-ORBIT-COUPLING ETC)
C
       OPEN(98,FILE='DENSITY',FORM='UNFORMATTED',STATUS='UNKNOWN')
       WRITE(98)(RHOG(I,1,1),I=1,NMSH)
       CLOSE(98)
C YY. Uncommenting COULOMB file since it is needed for spin-orbit-coupling calculation
       CALL CHECK_INPUTS
       IF(SPNORB1) then
        OPEN(93,FILE='COULOMB',FORM='UNFORMATTED',STATUS='UNKNOWN')
        REWIND(93)
        WRITE(93) NMSH
        WRITE(93)(COULOMB(IPTS),IPTS=1,NMSH)
        CLOSE(93)
       END IF
C
C IF (CONVERGENCE) WRITE POTENTIAL WITH ITER=0 AND GET FORCES
C Moved to subroutine after call to gtenrgy - CMD
C

C
C POTENTIAL MIXING. IGNORE START POTENTIAL IF (ITER.EQ.0)
C Moved to subroutine after call to gtenrgy - CMD
C

C
C TIMINGS
C
       CALL GTTIME(APT2)
       CALL TIMOUT('REDUCED DERIVATIVES OF RHO:         ',TIMERHO)
       CALL TIMOUT('GORBDRV EXECUTION:                  ',TIMEGORB)
       CALL TIMOUT('COULOMB POTENTIAL + RHO AND RHODRV: ',TIMECOUL)
       CALL TIMOUT('COMPLETE APOTNL EXECUTION:          ',APT2-APT1) 
       RETURN
       END SUBROUTINE APOTNL

