C UTEP Electronic Structure Lab (2020)
       SUBROUTINE DOSJNT 
C
C DOSJNT BY MRP/DVP NOV 1996
C modified by Luis Basurto 06/2013
C CALCULATES THE JOINT DENSITY OF STATES WITH AND WITHOUT DIPOLE WEIGHTS
C

       use dosjnt_mod,only : H,PSIG,SPTOT,SPDIP,SOS_FREQ,
     &   RVECA,PTS,GRAD,ICOUNT,ESTEP,EALP,SOS_POL,VFAC,
     &   ENJD,EXJD,TEMP,HA2EV,NSPEC,ISIZE,P,Q,V,FCGRP,CHARGE
       use zero1
       use debug1
       use global_inputs,only : dosjnt1
       use mesh1,only : WMSH,RMSH,NMSH
       use common2,only : RIDT, N_CON, LSYMMAX, N_POS, NFNCT, E_UP,
     &   E_DN, ISPN, NSPN, DIPOLE
       use common3,only : RMAT, NGRP
       use common5,only : PSI, NWF, NWFS, EFERMI, EVLOCC
       use mpidat1,only : NPROC, NCALLED
! Conversion to implicit none.  Raja Zope Sun Aug 20 09:01:48 MDT 2017

!      INCLUDE  'PARAMAS'  
       INCLUDE  'PARAMA2'  
       INTEGER :: IERR, IFAIL, IPILE, IPTS, ISWITCH, IWF, IX, JWF,
     & LMOM, MXSPEC, NMAX, NPILE, NTID
       REAL*8 :: SYMBOL , EFRMI, EMAX, EMIN, ERG, EWIND, FWHM, PI,
     & SDMAX, STMAX, TIME1, TIME2, TIMEA, TIMEB, TIMEC, TIMEOLD
       SAVE
       PARAMETER (MXSPEC=10000)
       PARAMETER (NMAX=MPBLOCK)
C
C FOOL THE COMPILER FOR MXSPN=1 TO SUPRESS WARNING MESSAGES
C THAT ARE REALLY IRRELEVANT
C
       LOGICAL IUPDAT,EXIST,LMKFIL,USEMPI,DMOM
C       COMMON/TMP2/PSIG(NMAX,MAX_OCC)
C
C SCRATCH COMMON BLOCK FOR LOCAL ARRAYS
C
C       COMMON/TMP1/H(MAX_OCC,MAX_OCC,3)
C     &  ,SPDIP(MXSPEC),SPTOT(MXSPEC),RVECA(3,MX_GRP)
C     &  ,PTS(NSPEED,3),GRAD(NSPEED,10,6,MAX_CON,3)
C     &  ,ICOUNT(MAX_CON,3)
C       REAL*8,ALLOCATABLE :: H(:,:,:),SPDIP(:),SPTOT(:),RVECA(:,:),
C     &                       PTS(:,:),GRAD(:,:,:,:,:)
C       REAL*8,ALLOCATABLE :: RVECA(:,:),PTS(:,:),GRAD(:,:,:,:,:)
C       LOGICAL,ALLOCATABLE :: ICOUNT(:,:)
C       DIMENSION ISIZE(3)
C       DIMENSION P(NMAX,3),Q(NMAX,3),V(NMAX)
       DATA USEMPI/.FALSE./
C       DATA ISIZE/1,3,6/
C       DATA HA2EV/27.2116D0/
C       DATA TEMP/1.0D-4/
       DATA EMIN,EMAX/-10000.,1.0D0/
C       DATA ENJD,EXJD/ 0.0,1.0D0/
       DATA FWHM/0.05D0/
C
C RETURN IF INPUT FILE DOES NOT EXIST
C
       PRINT '(A)','CALCULATING JOINT DENSITY OF STATES'
       CALL CHECK_INPUTS
       IF (.NOT.DOSJNT1) THEN
        PRINT '(2A)','DOSJNT: CHECK NRLMOL_INPUT.DAT ',
     &               '--> NOTHING TO DO'
        RETURN
       END IF
C
C ALLOCATE LOCAL ARRAYS
C
       ALLOCATE(RVECA(3,MX_GRP),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING RVECA'
       ALLOCATE(PTS(NSPEED,3),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING PTS'
       ALLOCATE(GRAD(NSPEED,10,6,MAX_CON,3),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING GRAD'
       ALLOCATE(ICOUNT(MAX_CON,3),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING ICOUNT'
       ALLOCATE(PSIG(NMAX,MAX_OCC),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING PSIG'
       TEMP=1.0D-4
       ENJD=0.0
       EXJD=1.0D0
C
C CREATE A STANDARD INPUT FILE IF THE CURRENT INPUT FILE IS EMPTY
C
C       CALL GTTIME(TIME1)
       LMKFIL=.TRUE.
C       OPEN(74,FILE='DOSJNT',FORM='FORMATTED',STATUS='OLD')
       OPEN(74,FILE='DOSJNT',FORM='FORMATTED')
       REWIND(74)
       READ(74,*,END=5,ERR=5) ISWITCH
       IF (ISWITCH .NE. 0) LMKFIL=.FALSE.
    5  CLOSE(74)
C
       IF (LMKFIL) THEN
C        OPEN(74,FILE='DOSJNT',FORM='FORMATTED',STATUS='OLD')
         OPEN(74,FILE='DOSJNT',FORM='FORMATTED')
         REWIND(74)
         WRITE(74,*) '0  auto=0, otherwise user-defined'
         WRITE(74,99) EMIN,EMAX,FWHM,'EMIN, EMAX, FWHM IN HARTREES'
         WRITE(74,98) ENJD,EXJD,'PLOTTED ENERGY WINDOW IN HARTREES'
         CLOSE(74)
   98    FORMAT(2F14.5,16X,A)
   99    FORMAT(3F14.5,2X,A)
       END IF
C
C READ IN TEMPERATURE
C
       OPEN(39,FILE='TMPTRE',FORM='FORMATTED',STATUS='UNKNOWN')
       REWIND(39)
       READ(39,*,END=10) TEMP
   10  CLOSE(39)
C
C READ IN NECESSARY INPUT DATA
C
C       OPEN(74,FILE='DOSJNT',FORM='FORMATTED',STATUS='OLD')
       OPEN(74,FILE='DOSJNT',FORM='FORMATTED')
       REWIND(74)
       READ(74,*,END=20) ISWITCH
       READ(74,*,END=20) EMIN,EMAX,FWHM
       READ(74,*,END=20) ENJD,EXJD
       GOTO 25
   20  CLOSE(74)
       PRINT *,'DOSJNT: FILE DOSJNT IS BROKEN'
       GOTO 900
C
   25  CLOSE(74)
       EWIND=(EXJD-ENJD)
       IF ((EWIND .LE. 0.0D0) .OR. (FWHM .LE. 0.0D0)) THEN
        PRINT '(A)','CALCULATION OF JDOS HAS BEEN SKIPPED'
        GOTO 900
       END IF
C       NSPEC=INT(10*EWIND/FWHM)+2
       EALP=4*LOG(2.0D0)/FWHM**2
       NSPEC=400
       PI=4*ATAN(1.0D0)
C       VFAC=SQRT(EALP/PI)/HA2EV
C LB: Use VFAC=1 to get same results as excite
       VFAC=1
       IF (NSPEC.GT.MXSPEC) THEN
        PRINT *,'DOSJNT: MXSPEC MUST BE AT LEAST: ',NSPEC
        CALL STOPIT
       END IF
      IF(.NOT.USEMPI)THEN
C
C CALL WFWIND TO GET THE CORRECT PSI_COEF
C WFWIND DEFINES NWF AND NWFS
C
       CALL GTTIME(TIME1)
       TIMEOLD=TIME1
C       EFMIN=MIN(EFERMI(1),EFERMI(NSPN))
C       EFMAX=MAX(EFERMI(1),EFERMI(NSPN))
C      EMIN=EFMIN-EWIND-(4*FWHM+20*TEMP)
C      EMAX=EFMAX+EWIND+(4*FWHM+20*TEMP)
       CALL WFWIND(EMIN,EMAX,.TRUE.,.TRUE.,IFAIL)
C       CALL TRACER('NWF=',NWF)
       IF (IFAIL .EQ. 1) THEN
        PRINT *,'DOSJNT: WFWIND FAILED, ABORTING JDOS CALCULATION'
        RETURN
       END IF
C
C ALLOCATE MORE LOCAL ARRAYS
C
       ALLOCATE(H(NWF,NWF,3),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING H'
       ALLOCATE(SPDIP(NSPEC),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING SPDIP'
       ALLOCATE(SPTOT(NSPEC),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING SPTOT'
       ALLOCATE(SOS_FREQ(NSPEC),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR ALLOCATING SOS_FREQ'
C
C ZERO H (CONTAINS THE DIPOLE MATRIX ELEMENTS)
C
C       DO IX=1,3
C        DO IWF=1,NWF
C         DO JWF=1,NWF
C          H(JWF,IWF,IX)=0.0D0
C         END DO
C        END DO
C       END DO
       CALL ZEROREALCUBE(H,NWF,NWF,3)
C
C CALCULATE DIPOLE MATRIX ELEMENTS BY MESH INTEGRATION
C
       CHARGE=0.0D0
       NPILE=NMSH/NMAX
       FCGRP=1.0D0/NGRP
C       CALL TRACER('NPILE=',NPILE)
#ifdef MPI
C
C Send data to nodes 
C
       CALL SENDDATA(200)
C
C Nodes allocate local arrays and initialize them to zero 
C
       CALL SENDDATA(201)
#endif
       DO 850 IPILE=0,NPILE
C LB: 07/2013 section 1 of parallelization start
#ifdef MPI
           CALL CKWORKER(1,NTID)
           IF (NCALLED .NE. NPROC) THEN
             CALL PAMDOSJNT(1,1,IPILE)
           ELSE
C No free workerern found, manager does this iteration
C             CALL TRACER('NONE FOUND I WILL DO',IPILE)
             CALL DOSJNT_S1(IPILE)
           END IF
#else
          CALL DOSJNT_S1(IPILE)
#endif
C LB: 07/2013 section 1 parallelization end
  850  CONTINUE
#ifdef MPI
C
C Get data back from workers
C
         CALL PAMDOSJNT(1,2,0)
#endif
C         OPEN(73,FILE='H_OUT')
C         DO II=1,NWF
C           DO JJ=1,NWF
C             DO KK=1,3
C               WRITE(73,*)H(II,JJ,KK)
C             ENDDO
C           ENDDO
C         ENDDO
C         CLOSE(73)
C         CALL TRACER('CHARGE=',1,CHARGE)
         CALL GTTIME(TIMEB)
C         CALL TIMOUT('DOSJNT Marker 3                   :',TIMEB-TIME1)
       ELSE
       write(6,*)'READING DIPOLE MATRIX ELEMENTS FROM SPNDAT'
           INQUIRE(FILE='SPNDAT',EXIST=EXIST)
           IF(EXIST)THEN
           OPEN(74,FILE='SPNDAT',FORM='UNFORMATTED')
           READ (74)NWF,NWFS,NSPN,DMOM,LMOM
           READ (74)EVLOCC
           READ (74)TEMP
           READ (74)EFRMI 
                        EFERMI(1)   =EFRMI
                        EFERMI(NSPN)=EFRMI
           READ (74)(((H(JWF,IWF,IX),JWF=1,NWF),IWF=1,NWF),IX=1,3)
           READ (74)CHARGE
           READ (74)E_UP,E_DN
           CLOSE(74)
           ELSE
           IF(.NOT.DMOM.OR..NOT.EXIST)THEN
           write(6,*)'DIPOLE MATRIX ELEMENTS UNAVAILABLE'
           write(6,*)'CHANGE DMOM=.TRUE. IN SPNORB'
           write(6,*)'ABANDONING JOINT DOS CALCULATION'
           RETURN
           END IF
           END IF
       CALL TRACER('I NEVER REACH THIS PLACE')             
                    DO IWF=1,NWF
                    DO JWF=IWF+1,NWF
                    H(JWF,IWF,1)=H(IWF,JWF,1)
                    H(JWF,IWF,2)=H(IWF,JWF,2)
                    H(JWF,IWF,3)=H(IWF,JWF,3)
                    END DO
                    END DO
         CALL GTTIME(TIMEC)
         CALL TIMOUT('DOSJNT Marker 4                   :',TIMEC-TIMEB)
       END IF
C
C JOINT DOS CALCULATION
C CALCULATE <PSI-I | DIPOL | PSI-J>**2 AND SPECTRUM
C
       ESTEP=EWIND/(NSPEC-1)
       SOS_POL = 0.0d0
       DO IPTS=1,NSPEC
        SOS_FREQ(IPTS) = 0.0d0
        SPTOT(IPTS)=0.0D0
        SPDIP(IPTS)=0.0D0
       END DO
C LB 06/13
C Start section 3 parallelization here
C
C       CALL TRACER('NWF=',NWF)
#ifdef MPI
       CALL SENDDATA(200)
#endif
       CALL GTTIME(TIMEA)
       DO IWF=1,NWF
C       DO IWF=1,1
#ifdef MPI
           CALL CKWORKER(1,NTID)
           IF (NCALLED .NE. NPROC) THEN
             CALL PAMDOSJNT(3,1,IWF)
           ELSE
C No free workerern found, manager does this iteration
C             CALL TRACER('NONE FOUND I WILL DO',IWF)
             CALL DOSJNT3(IWF)
           END IF
#else
         CALL DOSJNT3(IWF)
#endif
       END DO
#ifdef MPI
C
C Get data back from workers
C
       CALL PAMDOSJNT(3,2,0)
#endif
C LB 06/13
C End parallelization section 3 here
C       CALL TRACER('SOS_FREQ(2)=',0,SOS_FREQ(2))
C
C CORRECT FOR SPIN EFFECTS AND PRINT SPECTRA
C
       DO IPTS=1,NSPEC
         SDMAX=MAX(SDMAX,SPDIP(IPTS))
         STMAX=MAX(STMAX,SPTOT(IPTS))
       END DO 
       ! Normalize the spectrum.
       DO IPTS=1,NSPEC
         IF(SDMAX.NE.0) SPDIP(IPTS)=SPDIP(IPTS)/SDMAX
         IF(STMAX.NE.0) SPTOT(IPTS)=SPTOT(IPTS)/STMAX
       END DO
       WRITE(6,*)'Unscreened polarizability (Bohr^3)', SOS_POL
       WRITE(6,*)'Unscreened polarizability ang^3',SOS_POL*(0.5292**3)
       OPEN(73,FILE='JNTOUT',STATUS='UNKNOWN')
       REWIND(73)
       DO IPTS=1,NSPEC
        ERG=((IPTS-1)*ESTEP+ENJD)
C        WRITE(73,1010)-ERG*HA2EV,SPDIP(IPTS),SPTOT(IPTS),SOS_FREQ(IPTS)
        WRITE(73,1010)ERG*HA2EV,SPDIP(IPTS),SPTOT(IPTS),SOS_FREQ(IPTS)
 1010   FORMAT(4(1X,F15.6))
       END DO
       CLOSE(73)
  900  CONTINUE
       CALL GTTIME(TIME2)
       CALL TIMOUT('JOINT DENSITY OF STATES:           ',TIME2-TIME1)
C
C DEALLOCATE LOCAL ARRAYS
C
       DEALLOCATE(H,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING H'
       DEALLOCATE(SPDIP,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING SPDIP'
       DEALLOCATE(SPTOT,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING SPTOT'
       DEALLOCATE(SOS_FREQ,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING SOS_FREQ'
       DEALLOCATE(RVECA,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING RVECA'
       DEALLOCATE(PTS,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING PTS'
       DEALLOCATE(GRAD,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING GRAD'
       DEALLOCATE(ICOUNT,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING ICOUNT'
       DEALLOCATE(PSIG,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'DOSJNT:ERROR DEALLOCATING PSIG'

       RETURN
       END
