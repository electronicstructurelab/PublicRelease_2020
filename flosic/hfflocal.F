C UTEP Electronic Structure Lab (2020)
C
C **************************************************************
C
      SUBROUTINE HFFLOCAL(RHO)
C
C CALCULATE HELLMAN-FEYNMAN FORCE DUE TO LOCAL POTENTIAL
C DIRK POREZAG, AUGUST 1997 
C
       use mixpot1,only : VXC=>POTIN,POT=>POTOUT
       use mesh1,only : wmsh,rmsh,nmsh
       use common2,only : RIDT, IFUIDT, NIDENT, ZELC, EFIELD, FHELLF
       use common3,only : RMAT, NGRP
       use common8,only : REP
! Conversion to implicit none.  Raja Zope Sun Aug 20 09:01:52 MDT 2017

!      INCLUDE  'PARAMAS'  
       INCLUDE  'PARAMA2'  
       INTEGER :: I, IERR, IFU, IGRP, IID, IPTS, JID, JNUC, MNUC,
     & MSITES, N1BLOCK, N1OFS, N1PILE, N2BLOCK, N2OFS, N2PILE, NOFS
       REAL*8 :: SYMBOL , RHO, D1, D2, D3, DERIV, DIST, EXHERE, FAC,
     & FACSYM, FDIFF, SMALL, TIME1, TIME2, ZERO, ZI, ZJ, ZZDIRC
       SAVE
       PARAMETER(N1BLOCK=MPBLOCK)
       PARAMETER(N2BLOCK=NSPEED)
       DIMENSION RHO(*)
C       COMMON/MIXPOT/VXC(MAX_PTS*MXSPN),POT(MAX_PTS*MXSPN)
C       COMMON/TMP2/RROT(3,N1BLOCK,MX_GRP),RDIF(3,N2BLOCK)
C     &  ,RTMP(N2BLOCK),DTMP(3,N2BLOCK)
C     &  ,VLOC(N2BLOCK),RHOCDR(N2BLOCK),RNUC(3,MX_GRP)
       REAL*8,ALLOCATABLE :: RROT(:,:,:),RDIF(:,:),RTMP(:)
     &  ,DTMP(:,:),VLOC(:),RHOCDR(:),RNUC(:,:)
       DIMENSION DERIV(3)
       DATA ZERO /1.0D-4/
       DATA SMALL/1.0D-3/
C
       CALL GTTIME(TIME1)
C
C ALLOCATE LOCAL ARRAYS
C
       ALLOCATE(RROT(3,N1BLOCK,MX_GRP),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR ALLOCATING RROT'
       ALLOCATE(RDIF(3,N2BLOCK),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR ALLOCATING RDIF'
       ALLOCATE(RTMP(N2BLOCK),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR ALLOCATING RTMP'
       ALLOCATE(DTMP(3,N2BLOCK),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR ALLOCATING DTMP'
       ALLOCATE(VLOC(N2BLOCK),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR ALLOCATING VLOC'
       ALLOCATE(RHOCDR(N2BLOCK),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR ALLOCATING RHOCDR'
       ALLOCATE(RNUC(3,MX_GRP),STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR ALLOCATING RNUC'


       DO IID=1,NIDENT
        DO I=1,3
         FHELLF(I,IID)= 0.0D0
        END DO
       END DO
C
       DO 100 N1OFS=0,NMSH-1,N1BLOCK
        N1PILE=MIN(N1BLOCK,NMSH-N1OFS)       
C
C ROTATE POINTS 
C
        DO IGRP=1,NGRP
         DO IPTS=1,N1PILE
          DO I=1,3
           RROT(I,IPTS,IGRP)= RMAT(1,I,IGRP)*RMSH(1,N1OFS+IPTS)
     &                       +RMAT(2,I,IGRP)*RMSH(2,N1OFS+IPTS)
     &                       +RMAT(3,I,IGRP)*RMSH(3,N1OFS+IPTS)
          END DO
         END DO
        END DO
C
C UPDATE FHELLF FOR ALL ID MEMBERS
C
        DO IID= 1,NIDENT
         IFU=IFUIDT(IID)
         DO IGRP=1,NGRP
          DO 50 N2OFS=0,N1PILE-1,N2BLOCK
           N2PILE=MIN(N2BLOCK,N1PILE-N2OFS)
           DO IPTS=1,N2PILE
            RDIF(1,IPTS)= RROT(1,N2OFS+IPTS,IGRP)-RIDT(1,IID)
            RDIF(2,IPTS)= RROT(2,N2OFS+IPTS,IGRP)-RIDT(2,IID)
            RDIF(3,IPTS)= RROT(3,N2OFS+IPTS,IGRP)-RIDT(3,IID)
            RTMP(IPTS)= RDIF(1,IPTS)**2+RDIF(2,IPTS)**2+RDIF(3,IPTS)**2
            RTMP(IPTS)= SQRT(RTMP(IPTS))
           END DO
           CALL VLOCAL(2,N2PILE,IFU,RTMP,VLOC)
           CALL RHCDRV(IID,N2PILE,RTMP,DTMP,RHOCDR)
           NOFS=N1OFS+N2OFS 
           DO IPTS=1,N2PILE
            FAC= WMSH(NOFS+IPTS)*(RHO(NOFS+IPTS)*VLOC(IPTS)
     &                         +VXC(NOFS+IPTS)*RHOCDR(IPTS))
            FHELLF(1,IID)= FHELLF(1,IID)+FAC*RDIF(1,IPTS)
            FHELLF(2,IID)= FHELLF(2,IID)+FAC*RDIF(2,IPTS)
            FHELLF(3,IID)= FHELLF(3,IID)+FAC*RDIF(3,IPTS)
           END DO
   50     CONTINUE
         END DO
        END DO
  100  CONTINUE
C
C ALL POINTS DONE, NOW CORRECT FOR MULTIPLICITY OF POINTS AND
C INCLUDE NUCLEAR REPULSION
C
       FACSYM= 1.0D0/NGRP
       DO IID=1,NIDENT
        FHELLF(1,IID)= FACSYM*FHELLF(1,IID)
        FHELLF(2,IID)= FACSYM*FHELLF(2,IID)
        FHELLF(3,IID)= FACSYM*FHELLF(3,IID)
        ZI= ZELC(IFUIDT(IID))
        DO JID=1,NIDENT
         ZJ= ZELC(IFUIDT(JID))
         CALL GASITES(1,RIDT(1,JID),MNUC,RNUC,MSITES)
         DO JNUC=1,MNUC
          D1= RIDT(1,IID)-RNUC(1,JNUC)
          D2= RIDT(2,IID)-RNUC(2,JNUC)
          D3= RIDT(3,IID)-RNUC(3,JNUC)
          DIST= SQRT(D1*D1+D2*D2+D3*D3)
          IF (DIST .GT. ZERO) THEN
           ZZDIRC= ZI*ZJ/(DIST*DIST*DIST)
           FHELLF(1,IID)= FHELLF(1,IID)+D1*ZZDIRC
           FHELLF(2,IID)= FHELLF(2,IID)+D2*ZZDIRC
           FHELLF(3,IID)= FHELLF(3,IID)+D3*ZZDIRC
          END IF
         END DO
        END DO
C
C  ADD NUCLEAR COMPONENT CAUSED BY EFIELD*ZELC
C
        CALL EXTPOT(RIDT(1,IID),EXHERE,DERIV)
        FHELLF(1,IID)= FHELLF(1,IID)+(EFIELD(1)+DERIV(1))*ZI
        FHELLF(2,IID)= FHELLF(2,IID)+(EFIELD(2)+DERIV(2))*ZI
        FHELLF(3,IID)= FHELLF(3,IID)+(EFIELD(3)+DERIV(3))*ZI
C
C SYMMETRIZE FORCE
C
        CALL FRCSYM(RIDT(1,IID),FHELLF(1,IID),FDIFF)
        IF (FDIFF .GT. SMALL) THEN
         PRINT 1010,IID,FDIFF
 1010    FORMAT(' WARNING: HELLMANN-FEYNMAN FORCE OF ATOM ',I3,
     &          ' VIOLATES SYMMETRY BY ',D12.4)
        END IF
       END DO
C
C DEALLOCATE LOCAL ARRAYS
C
       DEALLOCATE(RROT,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR DEALLOCATING RROT'
       DEALLOCATE(RDIF,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR DEALLOCATING RDIF'
       DEALLOCATE(RTMP,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR DEALLOCATING RTMP'
       DEALLOCATE(DTMP,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR DEALLOCATING DTMP'
       DEALLOCATE(VLOC,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR DEALLOCATING VLOC'
       DEALLOCATE(RHOCDR,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR DEALLOCATING RHOCDR'
       DEALLOCATE(RNUC,STAT=IERR)
       IF(IERR/=0)WRITE(6,*)'HFFLOCAL:ERROR DEALLOCATING RNUC'

       CALL GTTIME(TIME2)
       CALL TIMOUT('HELLMANN-FEYNMAN FORCES:           ',TIME2-TIME1)
       RETURN
      END
