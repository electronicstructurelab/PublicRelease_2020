C UTEP Electronic Structure Lab (2020)
c
c *******************************************************************
c
c this routine broadcasts data to the workers
c depending on the value of job, different data sets will be sent
c valid ranges for job are from minjob to maxjob
c
      SUBROUTINE SENDDATA_MANAGERS(JOB)
#ifdef MPI
       use zero1
       use dosjnt_mod,only : H,PSIG,SPTOT,SPDIP,SOS_FREQ, 
     &   RVECA,PTS,GRAD,ICOUNT,ESTEP,EALP,SOS_POL,VFAC, 
     &   ENJD,EXJD,TEMP,HA2EV,NSPEC,ISIZE,P,Q,V,FCGRP,CHARGE
       use global_inputs,only : inbas,iiev,iimesh,iinitial,mpi_io1,
     &     ITTOT,LIBXC1
       use pot_dens
       use for_diag1
       use hstor1,only : HSTOR,NNZH,NNZO,IAH,JAH,IAO,JAO,MAXCLUSTERSIZE
       use formfakm 
       use mixpot1,only : POTIN,POTOUT
       use mesh1,only : wmsh,rmsh,nmsh
       use debug1,only : DEBUG,TRACER
       use common1,only : PSPSYM, ISITPSP, ISNLCC, RPSNLO, WPSNLO,
     &  VPSNLO, LMAXNLO, NRPSP, BHSALP, BHSCOF, RRADTAB, VLRTAB,
     &   RHOCOR, NRADTAB, NLCC
       use common2,only : RIDT, RCNT, IFUIDT, IFUCNT, NIDENT, NCNT,
     &  ZELC, ZNUC, BFCON, BFALP, N_BARE, N_CON, LSYMMAX, N_POS,
     &  NFNCT, IGGA, IDFTYP, ISPN, NSPN, FRC1, FRC2
       use common3,only : RMAT, NGRP, MULTAB
       use common4,only : RPFALP, RPFCMX, RPFCOF, NRPFIT, LDIVR
       use common5,only : PSI_COEF, OCCUPANCY, N_OCC, PSI, NWF,
     &   NWFS, EVLOCC, EFERMI
       use common6,only : TSPH, LIMSPH, NSPHERES
       use common7,only : MODDEN
       use common8,only : S_REP, P_REP, D_REP, REP, N_REP, NDMREP,
     &   N_SALC, IGEN, INDBEG, LDMREP, U_MAT, NS_TOT
       use mpidat1,only : IRANK, NPROC, SHMRANK,
     &                SHM_MANAGER_RANK, SHM_MANAGER_COMM,MANAGER_SIZE
       use XTMP2A,only : ISMGGA
       use istitl
!SIC modules
       use LOCORB,only  : TMAT,MORB,ZSIC,IRBSIC
       use MOCORB,only  : SLAT,NFRM,ZTZL,JJJJJJ
       use FRM,only     : BFRM,RESULTS,LFRM,DEBDAX
       use SICFLAG,only : MESH_SAV
       use SICMAT,only  : FMAT,SIC

! Conversion to implicit none.  Raja Zope Sun Aug 20 09:01:58 MDT 2017

!      INCLUDE  'PARAMAS'  
       INCLUDE  'PARAMA2'  
       INTEGER :: JOB, I, IFNCT, IKPT, J, KSPN, MAXJOB,
     &            MINJOB
       REAL*8 :: SYMBOL, C
       INCLUDE 'mpif.h'
       SAVE
       PARAMETER (MINJOB=101)
       PARAMETER (MAXJOB=211) !YY Increased from 201
       INTEGER TAG,ROOT,SIZE,IERR,IPROC

       REAL*8,ALLOCATABLE :: A(:,:),B(:,:)
c
!       COMMON/ISTITL/RNUC(3,MX_CNT),ZALP(2,MX_CNT),AFUDIS,ALONG
!     &  ,IFNU(MX_CNT),NPOW(MX_CNT),NNUC,MX1D
c
       ROOT= 0
       TAG= 0 
       IF ((JOB .LT. MINJOB) .OR. (JOB .GT. MAXJOB)) THEN
        write(6,*)'invalid job number in senddata: ',JOB,IRANK
        CALL STOPIT 
       ENDIF
!       CALL TRACER('SENDDATA JOB:',JOB)
!       IF (IRANK .EQ. 0) THEN
!        DO IPROC= 1,NPROC
!         CALL MPI_SSEND(JOB,1,MPI_INTEGER,IPROC,TAG,SHM_MANAGER_COMM,IERR)
!        END DO
!
! SUMMON ALL MANAGERS HERE
!
!       CALL TRACER('IRANK',IRANK)
!       IF (IRANK .EQ. 0) THEN
!        CALL TRACER('MANAGER_SIZE',MANAGER_SIZE)
!        DO IPROC= 1,MANAGER_SIZE
!         CALL MPI_SSEND(JOB,1,MPI_INTEGER,IPROC,TAG,
!     &        SHM_MANAGER_COMM,IERR)
!        END DO
!       END IF
!
! SUMMON ALL WORKERS HERE
!
       IF (SHM_MANAGER_RANK .EQ. 0) THEN
!        CALL TRACER('MANAGER_SIZE',MANAGER_SIZE)
        DO IPROC= 1,MANAGER_SIZE
         CALL MPI_SSEND(JOB,1,MPI_INTEGER,IPROC,TAG,
     &                  SHM_MANAGER_COMM,IERR)
        END DO
       END IF
          
c
c send data from common blocks: debug, group, cblk11, base_rep,
c                               spin, dftyp, nuclei, baset, pspinf,
c                               bhspsp, tabpsp, pspnlo, rhopfit
c
        IF(JOB.EQ.208)THEN
        CALL MPI_BCAST(MESH_SAV,1,MPI_LOGICAL,ROOT,SHM_MANAGER_COMM,
     &                 IERR)
        CALL MPI_BCAST(NFRM,MXSPN,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,
     &                 IERR)
        CALL MPI_BCAST(LFRM,MXSPN,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,
     &                 IERR)
        CALL MPI_BCAST(NWF,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NWFS,MXSPN,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,
     &                 IERR)
        CALL MPI_BCAST(N_OCC,MAX_REP*MXSPN,MPI_INTEGER,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(INDBEG,MAX_IDENT*MAX_REP,MPI_INTEGER,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
        END IF
       IF (JOB .EQ. 101) THEN
        CALL MPI_BCAST(ITTOT,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(MAXCLUSTERSIZE,1,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(DEBUG,1,MPI_LOGICAL,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NGRP,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(RMAT,3*3*NGRP,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(MULTAB,MX_GRP*NGRP,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(N_REP,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NDMREP,N_REP,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(LDMREP,N_REP,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        SIZE= 5*5*MX_GRP*N_REP 
        CALL MPI_BCAST(REP,SIZE,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(S_REP,1*1*NGRP,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(P_REP,3*3*NGRP,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(D_REP,6*6*NGRP,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NSPN,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(IGGA,  2,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(IDFTYP,2,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NIDENT,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NCNT,  1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(IFUIDT,NIDENT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(IFUCNT,NCNT,  MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(RIDT,3*NIDENT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(RCNT,3*NCNT,  MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NFNCT,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(N_BARE,NFNCT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(N_CON,3*NFNCT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(LSYMMAX,NFNCT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(N_POS,NFNCT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(ZELC,NFNCT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(ZNUC,NFNCT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        SIZE= MAX_BARE*MAX_CON*3*NFNCT 
        CALL MPI_BCAST(BFCON,SIZE,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(BFALP,MAX_BARE*NIDENT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(ISITPSP,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(ISNLCC, 1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        SIZE= NFNCT*7
        CALL MPI_BCAST(PSPSYM,SIZE,MPI_CHARACTER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NRADTAB,NFNCT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NLCC,NFNCT,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,
     &                 IERR)
        CALL MPI_BCAST(LMAXNLO,NFNCT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NRPSP,NFNCT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(BHSALP,2*NFNCT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(BHSCOF,2*NFNCT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        DO IFNCT= 1,NFNCT
         SIZE= NRADTAB(IFNCT)
         IF (SIZE .GT. 0) THEN
          CALL MPI_BCAST(RRADTAB(1,IFNCT),SIZE,MPI_DOUBLE_PRECISION,
     &                   ROOT,SHM_MANAGER_COMM,IERR)
          CALL MPI_BCAST(VLRTAB(1,1,IFNCT),2*SIZE,MPI_DOUBLE_PRECISION,
     &                   ROOT,SHM_MANAGER_COMM,IERR)
         END IF
         IF ((SIZE .GT. 0) .AND. (NLCC(IFNCT) .EQ. 1)) THEN
          CALL MPI_BCAST(RHOCOR(1,1,IFNCT),3*SIZE,MPI_DOUBLE_PRECISION,
     &                   ROOT,SHM_MANAGER_COMM,IERR)
         END IF
         SIZE= NRPSP(IFNCT)
         IF (SIZE .GT. 0) THEN
          CALL MPI_BCAST(RPSNLO(1,IFNCT),SIZE,MPI_DOUBLE_PRECISION,
     &                   ROOT,SHM_MANAGER_COMM,IERR)
          CALL MPI_BCAST(WPSNLO(1,IFNCT),SIZE,MPI_DOUBLE_PRECISION,
     &                   ROOT,SHM_MANAGER_COMM,IERR)
          SIZE= SIZE*(MXLPSP+1)
          CALL MPI_BCAST(VPSNLO(1,1,IFNCT),SIZE,MPI_DOUBLE_PRECISION,
     &                   ROOT,SHM_MANAGER_COMM,IERR)
         END IF
        END DO
        CALL MPI_BCAST(NRPFIT(1),NFNCT,MPI_INTEGER,
     &                 ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(LDIVR(1),NFNCT,MPI_INTEGER,
     &                 ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(RPFALP(1),NFNCT,MPI_DOUBLE_PRECISION,
     &                 ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(RPFCMX(1),NFNCT,MPI_DOUBLE_PRECISION,
     &                 ROOT,SHM_MANAGER_COMM,IERR)
        DO IFNCT= 1,NFNCT
         SIZE= 2*NRPFIT(IFNCT)
         CALL MPI_BCAST(RPFCOF(1,1,IFNCT),SIZE,MPI_DOUBLE_PRECISION,
     &                  ROOT,SHM_MANAGER_COMM,IERR)
        END DO
        RETURN
       END IF
c
c send mesh data
c
       IF (JOB .EQ. 102) THEN
        CALL MPI_BCAST(NMSH,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(WMSH,NMSH,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(RMSH,3*NMSH,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        RETURN
       END IF
c
c send data for poisson (and initialize coulomb and rhog)
c
       IF (JOB .EQ. 103) THEN
        CALL MPI_BCAST(MODDEN,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        DO I=1,NMSH
         COULOMB(I)=0.0D0
        END DO
        IF (MODDEN .EQ. 1) THEN
         DO KSPN=1,NSPN
          DO J=1,KRHOG
           DO I=1,NMSH
            RHOG(I,J,KSPN)=0.0D0
           END DO
          END DO
         END DO
        END IF
        RETURN
       END IF
c
c send data for hamiltonian
c
       IF (JOB .EQ. 104) THEN
        CALL MPI_BCAST(N_SALC,MAXSYMSALC*3*NIDENT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)       
        CALL MPI_BCAST(POTOUT,NMSH,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NSPHERES,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,
     &                 IERR)       
        CALL MPI_BCAST(LIMSPH,2*NSPHERES,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)       
        CALL MPI_BCAST(TSPH,4*NSPHERES,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)       
        RETURN
       END IF
c
c send general data for forces
c
       IF (JOB .EQ. 105) THEN
        CALL MPI_BCAST(NWF,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NWFS,NSPN,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(N_OCC,MAX_REP*NSPN,MPI_INTEGER,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(INDBEG,MAX_IDENT*MAX_REP,MPI_INTEGER,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(FRC1,3*NIDENT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(FRC2,3*NIDENT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(EVLOCC,MAX_OCC,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(POTOUT,NMSH*NSPN,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        SIZE= NDH*MAX_VIRT_PER_SYM*MAX_REP*NSPN
C        DO I=1,NSPN
          CALL MPI_BCAST(PSI_COEF,SIZE,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
C        ENDDO
        SIZE= MAX_VIRT_PER_SYM*MAX_REP*NSPN
        CALL MPI_BCAST(OCCUPANCY,SIZE,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        RETURN
       END IF
c
c send general data for creation of interstitial mesh
c initialize npts= 0 if not manager node
c
       IF (JOB .EQ. 106) THEN
        CALL MPI_BCAST(NNUC,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(MX1D,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NPOW,NNUC,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(IFNU,NNUC,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(ALONG,1,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(AFUDIS,1,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(ZALP,2*NNUC,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(RNUC,3*NNUC,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        IF (IRANK .NE. 0) NMSH= 0
        RETURN
       END IF
c
c send data for formfak (and initialize rhokpt)
c
       IF (JOB .EQ. 107) THEN
        CALL MPI_BCAST(NKPT,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(RKPT,3*NIDENT,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)         
        DO IKPT=1,NKPT
         DO ISPN=1,NSPN
          RHOKPT(1,ISPN,IKPT)=0.0D0
          RHOKPT(2,ISPN,IKPT)=0.0D0
         END DO
        END DO
        RETURN
       END IF

c
c Allocate memory for COULOMB and RHOG for all nodes
c 
       IF(JOB.EQ.108)THEN
         ALLOCATE(COULOMB(NMSH*MXSPN),STAT=IERR)
         IF(IERR.NE.0)THEN
           WRITE(6,*)'ERROR ALLOCATING COULOMB IN SENDDATA(108)'
         ENDIF
         ALLOCATE(RHOG(NMSH,KRHOG,MXSPN),STAT=IERR)
         IF(IERR.NE.0)THEN
           WRITE(6,*)'ERROR ALLOCATING RHOG IN SEDDATA(108)'
         ENDIF
       ENDIF
c
c Deallocate memory from COULOMB and RHOG for all nodes
c 
       IF(JOB.EQ.109)THEN
         DEALLOCATE(COULOMB,STAT=IERR)
         IF(IERR.NE.0)THEN
           WRITE(6,*)'ERROR DEALLOCATING COULOMB IN SENDDATA(109)'
         ENDIF
         DEALLOCATE(RHOG,STAT=IERR)
         IF(IERR.NE.0)THEN
           WRITE(6,*)'ERROR DEALLOCATING RHOG IN SENDDATA(109)'
         ENDIF
       ENDIF
c
c Deallocate memory from COULOMB and RHOG for workers
c
       IF(JOB.EQ.110)THEN
         IF(IRANK.NE.0)THEN
           DEALLOCATE(COULOMB,STAT=IERR)
           IF(IERR.NE.0)THEN
             WRITE(6,*)'ERROR DEALLOCATING COULOMB IN SENDDATA(110)'
           ENDIF
           DEALLOCATE(RHOG,STAT=IERR)
           IF(IERR.NE.0)THEN
             WRITE(6,*)'ERROR DEALLOCATING RHOG IN SENDDATA (110)'
           ENDIF
         ENDIF
       ENDIF

c
c Perform parallel diagonalization (send parameters first)
c
       IF(JOB.EQ.111)THEN
#ifdef SCALAPACK
c root node broadcasts parameters of problem to nodes
C (they are stored in module for_diag1)
C         IF(IRANK.EQ.0)THEN
C            WRITE(6,*)'NBAS=',INBAS
C            WRITE(6,*)'INITIAL=',IINITIAL
C            WRITE(6,*)'IEV=',IIEV
C            WRITE(6,*)'IIMESH=',IIMESH
C            WRITE(6,*)'NNZH=',NNZH
C            WRITE(6,*)'NNZO=',NNZO
C         ENDIF
         CALL MPI_BCAST(INBAS,1,MPI_INTEGER,ROOT,
     & SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(IIEV,1,MPI_INTEGER,ROOT,
     & SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(IINITIAL,1,MPI_INTEGER,ROOT,
     & SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(IIMESH,1,MPI_LOGICAL,ROOT,
     & SHM_MANAGER_COMM,IERR)
C         CALL MPI_BCAST(NNZH,1,MPI_INTEGER,ROOT,
C     & SHM_MANAGER_COMM,IERR)
C         CALL MPI_BCAST(NNZO,1,MPI_INTEGER,ROOT,
C     & SHM_MANAGER_COMM,IERR)
c worker nodes allocate local array for eigenvalues
        IF(IRANK.NE.0)THEN
           ALLOCATE(AEVAL(INBAS),STAT=IERR)
           IF(IERR.NE.0)then
             WRITE(6,*)'senddata:Error allocating AEVAL',irank
             CALL FLUSH(6)
           ENDIF
C           ALLOCATE(JAH(NNZH),STAT=IERR)
C           IF(IERR.NE.0)then
C             WRITE(6,*)'senddata:Error allocating JAH',irank
C             CALL FLUSH(6)
C           ENDIF
C           ALLOCATE(IAH(INBAS+1),STAT=IERR)
C           IF(IERR.NE.0)then
C             WRITE(6,*)'senddata:Error allocating IAH',irank
C             CALL FLUSH(6)
C           ENDIF
C           ALLOCATE(JAO(NNZO),STAT=IERR)
C           IF(IERR.NE.0)then
C             WRITE(6,*)'senddata:Error allocating JAO',irank
C             CALL FLUSH(6)
C           ENDIF
C           ALLOCATE(IAO(INBAS+1),STAT=IERR)
C           IF(IERR.NE.0)then
C             WRITE(6,*)'senddata:Error allocating IAO',irank
C             CALL FLUSH(6)

        ELSE
C          write(6,*)'Calling Scalapack'
        ENDIF
C Begin Broadcast HSTOR
        IF(.NOT.MPI_IO1)THEN
          CALL MPI_BCAST(HSTOR(1,1),NDH_TOT,MPI_DOUBLE_PRECISION,ROOT,
     & SHM_MANAGER_COMM,IERR)
          CALL MPI_BCAST(HSTOR(1,2),NDH_TOT,MPI_DOUBLE_PRECISION,ROOT,
     & SHM_MANAGER_COMM,IERR)
        ENDIF
C         CALL MPI_BCAST(JAO(1),NNZO,MPI_INTEGER,ROOT,
C     & SHM_MANAGER_COMM,IERR)
C         CALL MPI_BCAST(IAO(1),INBAS+1,MPI_INTEGER,ROOT,
C     & SHM_MANAGER_COMM,IERR)
C         CALL MPI_BCAST(JAH(1),NNZH,MPI_INTEGER,ROOT,
C     & SHM_MANAGER_COMM,IERR)
C         CALL MPI_BCAST(IAH(1),INBAS+1,MPI_INTEGER,ROOT,
C     & SHM_MANAGER_COMM,IERR)
C End Broadcast HSTOR

        CALL DIAGGES
c worker nodes deallocate local array for eigenvalues
        IF(IRANK.NE.0)THEN
           DEALLOCATE(AEVAL,STAT=IERR)
           IF(IERR.NE.0)then
             WRITE(6,*)'senddata:Error deallocating eval',irank
             CALL FLUSH(6)
           ENDIF
C           DEALLOCATE(IAH,JAH,IAO,JAO)
        ELSE
          IF(MPI_IO1) CALL SYSTEM('rm HAMTOT OVLTOT')
        ENDIF
C        WRITE(6,*)'came back from diagges',irank
#endif
       ENDIF
c
c Perform parallel diagonalization for EXCWAVE
c
      IF(JOB.EQ.112)THEN
         CALL MPI_BCAST(inbas,1,MPI_INTEGER,ROOT,
     &         SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(IIEV,1,MPI_INTEGER,ROOT,
     &         SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(HSTOR(1,1),NDH_TOT,MPI_DOUBLE_PRECISION,ROOT,
     & SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(HSTOR(1,2),NDH_TOT,MPI_DOUBLE_PRECISION,ROOT,
     & SHM_MANAGER_COMM,IERR)
!        write(irank+7,*)"senddata:diagges_exc:inbas",inbas
!        call flush(irank+7)
        IF(IRANK.NE.0)THEN
           ALLOCATE(AEVAL(INBAS),STAT=IERR)
            IF(IERR.NE.0)  WRITE(6,*)'senddata:Error allocating AEVAL',irank
        END IF
        CALL DIAGGES_EXC
        IF(IRANK.NE.0) DEALLOCATE(AEVAL)
      END IF
c
c perform testbas overlap diagonalization
c
       IF(JOB.EQ.113)THEN
#ifdef SCALAPACK
c root node broadcasts parameters of problem to nodes
C (they are stored in module for_diag1)
         IF(IRANK.EQ.0)THEN
C             WRITE(6,*)'SENDDATA: pre-DIAG_S_SYM. ISPN:',ISPN
C            WRITE(6,*)'NBAS=',INBAS
C            WRITE(6,*)'INITIAL=',IINITIAL
C            WRITE(6,*)'IEV=',IIEV
C            WRITE(6,*)'IIMESH=',IIMESH
         ENDIF
         CALL MPI_BCAST(INBAS,1,MPI_INTEGER,ROOT,
     & SHM_MANAGER_COMM,IERR)
C         CALL MPI_BCAST(IIEV,1,MPI_INTEGER,ROOT,
C     & SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(IIMESH,1,MPI_LOGICAL,ROOT,
     & SHM_MANAGER_COMM,IERR)
!        WRITE(IRANK+6,*)'SENDDATA NBAS',INBAS,'INITIAL',IINITIAL
!        CALL FLUSH(IRANK+6)
c worker nodes allocate local array for eigenvalues
        IF(IRANK.NE.0)THEN
           ALLOCATE(AEVAL(INBAS),STAT=IERR)
           IF(IERR.NE.0)then
             WRITE(6,*)'senddata:Error allocating AEVAL',irank
             CALL FLUSH(6)
           ENDIF
        ELSE
C          write(6,*)'Calling Scalapack'
        ENDIF
C Begin Broadcast HSTOR
          CALL MPI_BCAST(HSTOR(1,1),NDH_TOT,MPI_DOUBLE_PRECISION,ROOT,
     & SHM_MANAGER_COMM,IERR)
          CALL MPI_BCAST(HSTOR(1,2),NDH_TOT,MPI_DOUBLE_PRECISION,ROOT,
     & SHM_MANAGER_COMM,IERR)
C End Broadcast HSTOR

!        WRITE(IRANK+6,*)'BEFORE FUNCTION CALL,ISPN',ISPN
        CALL FLUSH(IRANK+6)
        CALL DIAG_S_SYM(IINITIAL,AEVAL)
c worker nodes deallocate local array for eigenvalues
        IF(IRANK.NE.0)THEN
           DEALLOCATE(AEVAL,STAT=IERR)
           IF(IERR.NE.0)then
             WRITE(6,*)'senddata:Error deallocating eval',irank
             CALL FLUSH(6)
           ENDIF
        ENDIF
#endif
       ENDIF
C
C Parallel Solpot
C
       IF(JOB.EQ.114)THEN
         CALL MPI_BCAST(ITTOT,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
         !CALL SOLPOT_MPI(ITTOT)
       END IF
C
C call to scalapack PDGEMM for matrix multiplication
C not used by node 0. node 0 calls PMAT_MUL in excwave
       IF(JOB.EQ.115)THEN
         if(irank/=0)then 
          CALL PMAT_MUL(inbas,A,B,C)
!          deallocate(A,B)
         end if
       END IF
C
C call to scalapack for hole orthogonalization in excrewrite
C not used by node 0. node 0 calls orthogonalize_hole in excwave
       IF(JOB.EQ.116)THEN
         if(irank/=0)then
C          CALL ORTHOGONALIZE_HOLE(iend,JND,A,B)
         end if
       END IF
C
C call to initialize mpi
C not used by node 0. node 0 calls in excwave
       IF(JOB.EQ.117)THEN
         if(irank/=0)then
C          CALL INIT_MPI(option)
         end if
       END IF  
C
C
C Parallel joint density of states
C 
       IF(JOB.EQ.200) THEN
         CALL MPI_BCAST(NWF,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(NWFS,NSPN,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,
     &                  IERR)
         CALL MPI_BCAST(EVLOCC,MAX_OCC,MPI_DOUBLE_PRECISION,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(EFERMI,2,MPI_DOUBLE_PRECISION,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(ENJD,1,MPI_DOUBLE_PRECISION,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(ESTEP,1,MPI_DOUBLE_PRECISION,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(EALP,1,MPI_DOUBLE_PRECISION,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(TEMP,1,MPI_DOUBLE_PRECISION,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(VFAC,1,MPI_DOUBLE_PRECISION,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(NSPEC,1,MPI_INTEGER,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(FCGRP,1,MPI_DOUBLE_PRECISION,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(NSPN,1,MPI_INTEGER,ROOT,SHM_MANAGER_COMM,IERR)
        SIZE= NDH*MAX_VIRT_PER_SYM*MAX_REP*NSPN
          CALL MPI_BCAST(PSI_COEF,SIZE,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        SIZE= MAX_VIRT_PER_SYM*MAX_REP*NSPN
        CALL MPI_BCAST(OCCUPANCY,SIZE,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(N_SALC,MAXSYMSALC*3*NIDENT,MPI_INTEGER,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(INDBEG,MAX_IDENT*MAX_REP,MPI_INTEGER,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
        SIZE=LOCMAX*ISMAX*MAXSYMSALC*3*2
        CALL MPI_BCAST(U_MAT,SIZE,MPI_DOUBLE_PRECISION,ROOT,
     &                 SHM_MANAGER_COMM,IERR)
C        CALL MPI_BCAST(N_CON,3*NFNCT,MPI_INTEGER,ROOT,
C     &                 SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(N_OCC,MAX_REP*NSPN,MPI_INTEGER,ROOT,
     &                  SHM_MANAGER_COMM,IERR)
       ENDIF
      IF(JOB.EQ.201)THEN
        IF(IRANK.NE.0)THEN
          ALLOCATE(RVECA(3,MX_GRP),STAT=IERR)
          IF(IERR/=0)WRITE(6,*)'SENDDATA:ERROR ALLOCATING RVECA'
          ALLOCATE(PTS(NSPEED,3),STAT=IERR)
          IF(IERR/=0)WRITE(6,*)'SENDDATA:ERROR ALLOCATING PTS'
          ALLOCATE(GRAD(NSPEED,10,6,MAX_CON,3),STAT=IERR)
          IF(IERR/=0)WRITE(6,*)'SENDDATA:ERROR ALLOCATING GRAD'
          ALLOCATE(ICOUNT(MAX_CON,3),STAT=IERR)
          IF(IERR/=0)WRITE(6,*)'SENDDATA:ERROR ALLOCATING ICOUNT'
          ALLOCATE(PSIG(MPBLOCK,MAX_OCC),STAT=IERR)
          IF(IERR/=0)WRITE(6,*)'SENDDATA:ERROR ALLOCATING PSIG'
          ALLOCATE(H(NWF,NWF,3),STAT=IERR)
          IF(IERR.NE.0)THEN
            WRITE(6,*)'ERROR ALLOCATING H IN SENDDATA(201)'
          ENDIF
          ALLOCATE(SPTOT(NSPEC),STAT=IERR)
          IF(IERR.NE.0)THEN
            WRITE(6,*)'ERROR ALLOCATING SPTOT IN SENDDATA(201)'
          ENDIF
          ALLOCATE(SPDIP(NSPEC),STAT=IERR)
          IF(IERR.NE.0)THEN
            WRITE(6,*)'ERROR ALLOCATING SPDIP IN SENDDATA(201)'
          ENDIF
          ALLOCATE(SOS_FREQ(NSPEC),STAT=IERR)
          IF(IERR.NE.0)THEN
            WRITE(6,*)'ERROR ALLOCATING SOS_FREQ IN SENDDATA(201)'
          ENDIF
          CALL ZEROREALCUBE(H,NWF,NWF,3)
          CALL ZEROREALARRAY(SPDIP)
          CALL ZEROREALARRAY(SPTOT)
          CALL ZEROREALARRAY(SOS_FREQ)
          CHARGE=0.0D0
          SOS_POL=0.0D0
        ENDIF
       ENDIF
       IF(JOB.EQ.202)THEN
        IF(NPROC.GE.1)THEN
         CALL MPI_BCAST(ISMGGA,1,MPI_LOGICAL,ROOT,SHM_MANAGER_COMM,IERR)
         CALL MPI_BCAST(LIBXC1,1,MPI_LOGICAL,ROOT,SHM_MANAGER_COMM,IERR)
        ENDIF
       ENDIF 
!##########################
!SIC module Broadcasting  #
!##########################
      IF(JOB.EQ.210)THEN
        CALL MPI_BCAST(SLAT,MAX_OCC*MAX_OCC*MXSPN,MPI_DOUBLE_PRECISION,
     &       ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(TMAT,MAX_OCC*MAX_OCC*MXSPN,MPI_DOUBLE_PRECISION,
     &       ROOT,SHM_MANAGER_COMM,IERR)
       END IF
       IF (JOB .EQ. 209) THEN
C       CALL MPI_BCAST(PSI_COEF,NDH*MAX_VIRT_PER_SYM*MAX_REP*MXSPN,
C    &       MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(U_MAT,LOCMAX*ISMAX*MAXSYMSALC*3*2,
C    &       MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
        SIZE=MAX_OCC*MAX_OCC*MXSPN
        CALL MPI_BCAST(SLAT,MAX_OCC*MAX_OCC*MXSPN,MPI_DOUBLE_PRECISION,
     &       ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(TMAT,MAX_OCC*MAX_OCC*MXSPN,MPI_DOUBLE_PRECISION,
     &       ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(MORB,2,MPI_INTEGER,
     &       ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(ZSIC,1,MPI_DOUBLE_PRECISION,
     &       ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(IRBSIC,1,MPI_INTEGER,
     &       ROOT,SHM_MANAGER_COMM,IERR)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C       CALL MPI_BCAST(POTIN,MAX_PTS*MXSPN,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(POT,MAX_PTS*MXSPN,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(COULOMB,MAX_PTS,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(RHOG,MAX_PTS*10*MXSPN,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(PSIG,NMAX*10*MAX_OCC,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(PTS,NSPEED*3,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(GRAD,NSPEED*10*6*MAX_CON*3,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(RVECA,3*MX_GRP,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(ICOUNT,MAX_CON*3,MPI_INTEGER,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(SIC,MAX_OCC*MAX_OCC*MXSPN,MPI_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
        CALL MPI_BCAST(BFRM,3*MAX_OCC*MXSPN,MPI_DOUBLE_PRECISION,
     &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(RESULTS,13*MAX_OCC*MXSPN,MPI_DOUBLE_PRECISION,
C    &       ROOT,SHM_MANAGER_COMM,IERR)
C       CALL MPI_BCAST(LFRM,MXSPN,MPI_INTEGER,           
C    &       ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(DEBDAX,3*MAX_OCC*MXSPN,MPI_DOUBLE_PRECISION,
     &       ROOT,SHM_MANAGER_COMM,IERR)
c ================================================================ c
c       CALL MPI_BCAST(NFNCT,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(N_NUC,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(IFNCT,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(KSPN,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(ISHELLA,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(MD,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(KORB,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(I_SITE,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(ILOC,1,MPI_INTEGER,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(RVEC,3,MPI_DOUBLE_PRECISION,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
c       CALL MPI_BCAST(RVECI,3*MX_GRP,MPI_DOUBLE_PRECISION,
c    &       ROOT,SHM_MANAGER_COMM,IERR)
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
        CALL MPI_BCAST(NS_TOT,MAX_REP,MPI_INTEGER,          
     &       ROOT,SHM_MANAGER_COMM,IERR)
        CALL MPI_BCAST(INDBEG,MAX_REP*MAX_IDENT,MPI_INTEGER,          
     &       ROOT,SHM_MANAGER_COMM,IERR)
       END IF
       IF(JOB.EQ.211) THEN
!         CALL TRACER('STARTED SENDDATA_MANAGERS 211')
!         IF(IRANK/=0)THEN
!           IF(.NOT.ALLOCATED(OVER))THEN
!             ALLOCATE(OVER(NDH,NDH),STAT=IERR)
!             IF(IERR/=0) WRITE(6+IRANK,*)
!     &          'SENDDATA_MANAGERS:ERROR ALLOCATING OVER'
!           ENDIF
!         ENDIF
         CALL MPI_BCAST(FMAT(1,1,1,1),MAX_OCC*MAX_OCC*4*2,
     &        MPI_DOUBLE_PRECISION,ROOT,SHM_MANAGER_COMM,IERR)
! For FOD force calculations, you need SIC array from the previous iteration
         CALL MPI_BCAST(SIC(1,1,1),MAX_OCC*MAX_OCC*NSPN,
     &        MPI_DOUBLE_PRECISION,ROOT,SHM_MANAGER_COMM,IERR)
!         CALL TRACER('FINISHED SENDDATA_MANAGERS 211')
       ENDIF
#endif   
      END
